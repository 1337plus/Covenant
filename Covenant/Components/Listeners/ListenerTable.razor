@inherits OwningComponentBase<ICovenantService>

@using System.Collections.Generic
@using Microsoft.JSInterop

@using Covenant.Core
@using Covenant.Models.Listeners
@using Covenant.Components.Shared
@inject IJSRuntime IJSRuntime

<CovenantTable TItem="Listener" Items="Listeners.ToList()" SearchRow="IsRowDisplayed"
               IsSearchable="IsSearchable" IsSortable="IsSortable" IsPaginated="IsPaginated" PageLength="PageLength" class="table table-hover">
    <TableHeader>
        <SortableTableHeader TItem="Listener" TItem2="string" GetSortableProperty="(listener) => listener.Name">
            <HeaderContent>Name</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Listener" TItem2="ListenerType" GetSortableProperty="(listener) => listener.ListenerType">
            <HeaderContent>ListenerType</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Listener" TItem2="ListenerStatus" GetSortableProperty="(listener) => listener.Status">
            <HeaderContent>Status</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Listener" TItem2="DateTime" GetSortableProperty="(listener) => listener.StartTime">
            <HeaderContent>StartTime</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Listener" TItem2="string" GetSortableProperty="(listener) => ToString(listener.ConnectAddresses)">
            <HeaderContent>ConnectAddresses</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Listener" TItem2="int" GetSortableProperty="(listener) => listener.ConnectPort">
            <HeaderContent>ConnectPort</HeaderContent>
        </SortableTableHeader>
        <th class="pl-1 pr-1">
            <div class="d-flex flex-nowrap">
                Action
            </div>
        </th>
    </TableHeader>
    <TableRow Context="listener">
        <tr>
            <td>
                <a href="/listener/edit/@listener.Id">@listener.Name</a>
            </td>
            <td>@listener.ListenerType.Name</td>
            <td>@listener.Status</td>
            <td>@listener.StartTime</td>
            <td>@ToString(listener.ConnectAddresses)</td>
            <td>@listener.ConnectPort</td>
            <td>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle pt-0 pb-0 mt-n2" type="button" id="dropdownActionListener" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Action
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownActionListener">
                        @if (listener.Status != ListenerStatus.Active)
                        {
                            <a class="dropdown-item" type="button" @onclick="(e => OnStartListener(listener))">
                                <span class="fe fe-play"></span>
                                Start
                            </a>
                        }
                        else
                        {
                            <a class="dropdown-item text-warning" type="button" @onclick="(e => OnStopListener(listener))">
                                <span class="fe fe-stop-circle"></span>
                                Stop
                            </a>
                        }
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item text-danger" type="button" @onclick="(e => OnDeleteListener(listener))">
                            <span class="fe fe-x"></span>
                            Delete
                        </a>
                    </div>
                </div>
            </td>
        </tr>
    </TableRow>
</CovenantTable>

@code {
    [Parameter]
    public List<Listener> Listeners { get; set; }

    [Parameter]
    public EventCallback<List<Listener>> ListenersChanged { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = false;

    [Parameter]
    public bool IsSortable { get; set; } = true;

    [Parameter]
    public bool IsPaginated { get; set; } = true;

    [Parameter]
    public int PageLength { get; set; } = 25;

    private string ToString(List<string> list)
    {
        return string.Join(",", list);
    }

    private void OnListenersChanged(List<Listener> Listeners)
    {
        this.Listeners = Listeners;
        this.ListenersChanged.InvokeAsync(Listeners);
    }

    private bool IsRowDisplayed(Listener listener, string SearchTerm)
    {
        return SearchTerm == string.Empty ||
            listener.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            listener.ListenerType.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            listener.Status.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            listener.StartTime.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            ToString(listener.ConnectAddresses).Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            listener.ConnectPort.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase);
    }

    private async Task OnStartListener(Listener listener)
    {
        listener.Status = ListenerStatus.Active;
        await Service.EditListener(listener);
        this.Listeners[this.Listeners.FindIndex(L => L.Id == listener.Id)] = listener;
    }

    private async Task OnStopListener(Listener listener)
    {
        listener.Status = ListenerStatus.Stopped;
        await Service.EditListener(listener);
        this.Listeners[this.Listeners.FindIndex(L => L.Id == listener.Id)] = listener;
    }

    private async Task OnDeleteListener(Listener listener)
    {
        await Service.DeleteListener(listener.Id);
        this.Listeners.RemoveAt(this.Listeners.FindIndex(L => L.Id == listener.Id));
    }
}