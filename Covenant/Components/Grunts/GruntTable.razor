@inherits OwningComponentBase<ICovenantService>

@using System.Collections.Generic
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Authorization

@using Covenant.Core
@using Covenant.Models.Grunts
@using Covenant.Components.Shared
@inject IJSRuntime IJSRuntime
@inject INotificationService INotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<CovenantTable TItem="Grunt" Items="Grunts" ItemsChanged="GruntsChanged" SearchRow="IsRowDisplayed"
               IsSearchable="IsSearchable" IsSortable="IsSortable" IsPaginated="IsPaginated" PageLength="PageLength" class="table table-hover">
    <TableHeader>
        @if (this.OnSelectTerminal.HasDelegate)
        {
            <th class="pl-1 pr-1">
                <div class="secondary-color">
                    <span class="fe fe-terminal"></span>
                </div>
            </th>
        }
        <SortableTableHeader TItem="Grunt" TItem2="string" GetSortableProperty="(grunt) => grunt.Name">
            <HeaderContent>Name</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Grunt" TItem2="string" GetSortableProperty="(grunt) => grunt.Hostname">
            <HeaderContent>Hostname</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Grunt" TItem2="string" GetSortableProperty="(grunt) => grunt.UserName">
            <HeaderContent>User</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Grunt" TItem2="IntegrityLevel" GetSortableProperty="(grunt) => grunt.Integrity">
            <HeaderContent>Integrity</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Grunt" TItem2="DateTime" GetSortableProperty="(grunt) => grunt.LastCheckIn">
            <HeaderContent>LastCheckIn</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Grunt" TItem2="GruntStatus" GetSortableProperty="(grunt) => grunt.Status">
            <HeaderContent>Status</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Grunt" TItem2="string" GetSortableProperty="(grunt) => grunt.Note">
            <HeaderContent>Note</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Grunt" TItem2="string" GetSortableProperty="(grunt) => grunt.ImplantTemplate?.Name">
            <HeaderContent>Template</HeaderContent>
        </SortableTableHeader>
        <th></th>
    </TableHeader>
    <TableRow Context="grunt">
        <tr style="opacity: @GetGruntStatusOpacity(grunt.Status)">
            @if (this.OnSelectTerminal.HasDelegate)
            {
                <td @attributes="InputAttributes">
                    <div class="secondary-color secondary-highlight-hover secondary-shadow" @onclick="e => OnSelectTerminal.InvokeAsync(grunt)">
                        <span class="fe fe-terminal"></span>
                    </div>
                </td>
            }
            <td @attributes="InputAttributes">
                <a href="/grunt/interact/@grunt.Id">
                    @grunt.Name
                </a>
            </td>
            <td @attributes="InputAttributes">@grunt.Hostname</td>
            <td @attributes="InputAttributes">@grunt.UserName</td>
            <td @attributes="InputAttributes">@grunt.Integrity</td>
            <td @attributes="InputAttributes">@grunt.LastCheckIn</td>
            <td @attributes="InputAttributes">@grunt.Status</td>
            <td @attributes="InputAttributes">@grunt.Note</td>
            <td @attributes="InputAttributes">@grunt.ImplantTemplate?.Name</td>
            <td style="text-align: right;">
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle pt-0 pb-0 mt-n2"
                            type="button" id="dropdownActionGrunt" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Action
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownActionGrunt">
                        <a class="dropdown-item" type="button" @onclick="(e => OnSelectTerminal.InvokeAsync(grunt))">
                            <span class="fe fe-terminal"></span>
                            Interact
                        </a>
                        @if (grunt.Status == GruntStatus.Active || grunt.Status == GruntStatus.Lost)
                        {
                            <a class="dropdown-item text-warning" type="button" @onclick="(e => OnHideGrunt(grunt))">
                                <span class="fe fe-eye-off"></span>
                                Hide
                            </a>
                        }
                        else if (grunt.Status == GruntStatus.Hidden)
                        {
                            <a class="dropdown-item text-success" type="button" @onclick="(e => OnUnhideGrunt(grunt))">
                                <span class="fe fe-eye"></span>
                                Unhide
                            </a>
                        }
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item text-danger" type="button" @onclick="(e => OnDeleteGrunt(grunt))">
                            <span class="fe fe-x"></span>
                            Delete
                        </a>
                    </div>
                </div>
            </td>
        </tr>
    </TableRow>
    <ButtonTray>@ButtonTray</ButtonTray>
</CovenantTable>

@code {
    [Parameter]
    public List<Grunt> Grunts { get; set; }

    [Parameter]
    public EventCallback<List<Grunt>> GruntsChanged { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = false;

    [Parameter]
    public bool IsSortable { get; set; } = true;

    [Parameter]
    public bool IsPaginated { get; set; } = true;

    [Parameter]
    public int PageLength { get; set; } = 50;

    [Parameter]
    public EventCallback<Grunt> OnSelectTerminal { get; set; }

    [Parameter]
    public RenderFragment ButtonTray { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    protected async override Task OnInitializedAsync()
    {
        this.Grunts = this.Grunts ?? (await Service.GetGrunts()).ToList();
        Service.DisposeContext();
    }

    private string GetGruntStatusOpacity(GruntStatus s)
    {
        return s == GruntStatus.Active ? "1.0" : "0.3";
    }

    private void OnGruntsChanged(List<Grunt> Grunts)
    {
        this.Grunts = Grunts;
        this.GruntsChanged.InvokeAsync(Grunts);
    }

    private bool IsRowDisplayed(Grunt grunt, string SearchTerm)
    {
        return SearchTerm == string.Empty ||
            grunt.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            (grunt.ImplantTemplate != null && grunt.ImplantTemplate.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase)) ||
            grunt.Hostname.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            grunt.UserName.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            grunt.Status.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            grunt.LastCheckIn.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            grunt.Integrity.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            grunt.OperatingSystem.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            grunt.Process.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase);
    }

    private async Task OnHideGrunt(Grunt grunt)
    {
        try
        {
            grunt.Status = GruntStatus.Hidden;
            AuthenticationState state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await Service.EditGrunt(grunt, await Service.GetCurrentUser(state.User));
            Service.DisposeContext();
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            // return RedirectToAction(nameof(Interact), new { id = grunt.Id });
        }
    }

    private async Task OnUnhideGrunt(Grunt grunt)
    {
        try
        {
            grunt.Status = GruntStatus.Active;
            AuthenticationState state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await Service.EditGrunt(grunt, await Service.GetCurrentUser(state.User));
            Service.DisposeContext();
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            // return RedirectToAction(nameof(Interact), new { id = grunt.Id });
        }
    }

    private async Task OnDeleteGrunt(Grunt grunt)
    {
        try
        {
            await Service.DeleteGrunt(grunt.Id);
            grunt.Status = GruntStatus.Active;
            Service.DisposeContext();
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            // return RedirectToAction(nameof(Interact), new { id = grunt.Id });
        }
    }
}