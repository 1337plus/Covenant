@inherits OwningComponentBase<ICovenantService>

@using Microsoft.JSInterop
@using Covenant.Core
@using Covenant.Models.Covenant
@using Covenant.Components.Shared
@inject IJSRuntime IJSRuntime

<CovenantTable TItem="CapturedHashCredential" Items="HashCredentials.ToList()" SearchRow="IsRowDisplayed"
               IsSearchable="IsSearchable" IsSortable="IsSortable" IsPaginated="IsPaginated" PageLength="PageLength" class="table table-hover">
    <TableHeader>
        <SortableTableHeader TItem="CapturedHashCredential" TItem2="string" GetSortableProperty="(credential) => credential.Domain">
            <HeaderContent>Domain</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="CapturedHashCredential" TItem2="string" GetSortableProperty="(credential) => credential.Username">
            <HeaderContent>Username</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="CapturedHashCredential" TItem2="HashType" GetSortableProperty="(credential) => credential.HashCredentialType">
            <HeaderContent>HashCredentialType</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="CapturedHashCredential" TItem2="string" GetSortableProperty="(credential) => credential.Hash">
            <HeaderContent>Hash</HeaderContent>
        </SortableTableHeader>
        <th></th>
    </TableHeader>
    <TableRow Context="credential">
        <tr>
            <td>@credential.Domain</td>
            <td>@credential.Username</td>
            <td>@credential.HashCredentialType</td>
            <td>@credential.Hash</td>
            <td style="text-align: right;">
                <div class="dropdown">
                    <button class="btn btn-outline-secondary btn-sm dropdown-toggle pt-0 pb-0 mt-n2" type="button" id="dropdownActionHashCredential" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Action
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownActionHashCredential">
                        <a class="dropdown-item" type="button" href="/credential/edit/@credential.Id">
                            <span class="fe fe-edit"></span>
                            Edit
                        </a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item text-danger" type="button" @onclick="(e => OnDeleteCredential(credential))">
                            <span class="fe fe-x"></span>
                            Delete
                        </a>
                    </div>
                </div>
            </td>
        </tr>
    </TableRow>
</CovenantTable>

@code {
    [Parameter]
    public List<CapturedHashCredential> HashCredentials { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = false;

    [Parameter]
    public bool IsSortable { get; set; } = true;

    [Parameter]
    public bool IsPaginated { get; set; } = true;

    [Parameter]
    public int PageLength { get; set; } = 10;

    private bool IsRowDisplayed(CapturedHashCredential credential, string SearchTerm)
    {
        return SearchTerm == string.Empty ||
            credential.Domain.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            credential.Username.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            credential.HashCredentialType.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            credential.Hash.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase);
    }

    private async Task OnDeleteCredential(CapturedCredential credential)
    {
        await Service.DeleteCredential(credential.Id);
        this.HashCredentials.RemoveAt(this.HashCredentials.FindIndex(C => C.Id == credential.Id));
    }
}